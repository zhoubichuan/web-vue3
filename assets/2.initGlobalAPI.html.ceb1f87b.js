import{_ as s,o as n,c as a,a as l}from"./app.8390b8a1.js";const p={},e=l(`<h1 id="\u4E00-createapp" tabindex="-1"><a class="header-anchor" href="#\u4E00-createapp" aria-hidden="true">#</a> \u4E00.createApp</h1><h2 id="_1-\u5F00\u53D1\u4F7F\u7528vue3-x" tabindex="-1"><a class="header-anchor" href="#_1-\u5F00\u53D1\u4F7F\u7528vue3-x" aria-hidden="true">#</a> 1.\u5F00\u53D1\u4F7F\u7528vue3.x</h2><p>App.vue</p><div class="language-vue ext-vue line-numbers-mode"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">&lt;</span><span style="color:#116329;">template</span><span style="color:#24292F;">&gt;</span></span>
<span class="line"><span style="color:#24292F;">  &lt;</span><span style="color:#116329;">img</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">alt</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;Vue logo&quot;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">src</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;./assets/logo.png&quot;</span><span style="color:#24292F;">&gt;</span></span>
<span class="line"><span style="color:#24292F;">  &lt;</span><span style="color:#116329;">HelloWorld</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">msg</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;Welcome to Your Vue.js App&quot;</span><span style="color:#24292F;">/&gt;</span></span>
<span class="line"><span style="color:#24292F;">&lt;/</span><span style="color:#116329;">template</span><span style="color:#24292F;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">&lt;</span><span style="color:#116329;">script</span><span style="color:#24292F;">&gt;</span></span>
<span class="line"><span style="color:#CF222E;">import</span><span style="color:#24292F;"> HelloWorld </span><span style="color:#CF222E;">from</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;./components/HelloWorld.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">export</span><span style="color:#953800;"> </span><span style="color:#CF222E;">default</span><span style="color:#953800;"> {</span></span>
<span class="line"><span style="color:#953800;">  </span><span style="color:#24292F;">name: </span><span style="color:#0A3069;">&#39;App&#39;</span><span style="color:#953800;">,</span></span>
<span class="line"><span style="color:#953800;">  </span><span style="color:#24292F;">components: {</span></span>
<span class="line"><span style="color:#24292F;">    HelloWorld</span></span>
<span class="line"><span style="color:#24292F;">  }</span></span>
<span class="line"><span style="color:#953800;">}</span></span>
<span class="line"><span style="color:#24292F;">&lt;/</span><span style="color:#116329;">script</span><span style="color:#24292F;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">import</span><span style="color:#24292F;"> { createApp } </span><span style="color:#CF222E;">from</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#CF222E;">import</span><span style="color:#24292F;"> App </span><span style="color:#CF222E;">from</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8250DF;">createApp</span><span style="color:#24292F;">(App).</span><span style="color:#8250DF;">mount</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&#39;#app&#39;</span><span style="color:#24292F;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-vue3-x\u6E90\u7801\u5185\u90E8" tabindex="-1"><a class="header-anchor" href="#_2-vue3-x\u6E90\u7801\u5185\u90E8" aria-hidden="true">#</a> 2.vue3.x\u6E90\u7801\u5185\u90E8</h2><p>createApp(App) &lt;-- createRenderer &lt;-- baseCreateRenderer</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">createApp</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> ((</span><span style="color:#CF222E;">...</span><span style="color:#953800;">args</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">app</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">ensureRenderer</span><span style="color:#24292F;">().</span><span style="color:#8250DF;">createApp</span><span style="color:#24292F;">(</span><span style="color:#CF222E;">...</span><span style="color:#24292F;">args);</span></span>
<span class="line"><span style="color:#24292F;">    {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">injectNativeTagCheck</span><span style="color:#24292F;">(app);</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">injectCompilerOptionsCheck</span><span style="color:#24292F;">(app);</span></span>
<span class="line"><span style="color:#24292F;">    }</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">mount</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> app;</span></span>
<span class="line"><span style="color:#24292F;">    app.</span><span style="color:#8250DF;">mount</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">containerOrSelector</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">container</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">normalizeContainer</span><span style="color:#24292F;">(containerOrSelector);</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">container)</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">component</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> app._component;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#8250DF;">isFunction</span><span style="color:#24292F;">(component) </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">component.render </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">component.template) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// __UNSAFE__</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// Reason: potential execution of JS expressions in in-DOM template.</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// The user must make sure the in-DOM template is trusted. If it&#39;s</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// rendered by the server, the template should not contain any user data.</span></span>
<span class="line"><span style="color:#24292F;">            component.template </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> container.innerHTML;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// clear content before mounting</span></span>
<span class="line"><span style="color:#24292F;">        container.innerHTML </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;&#39;</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">proxy</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">mount</span><span style="color:#24292F;">(container, </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">, container </span><span style="color:#CF222E;">instanceof</span><span style="color:#24292F;"> </span><span style="color:#953800;">SVGElement</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (container </span><span style="color:#CF222E;">instanceof</span><span style="color:#24292F;"> </span><span style="color:#953800;">Element</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            container.</span><span style="color:#8250DF;">removeAttribute</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&#39;v-cloak&#39;</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">            container.</span><span style="color:#8250DF;">setAttribute</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&#39;data-v-app&#39;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&#39;&#39;</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> proxy;</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> app;</span></span>
<span class="line"><span style="color:#24292F;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">ensureRenderer</span><span style="color:#24292F;">() {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> (renderer </span><span style="color:#CF222E;">||</span></span>
<span class="line"><span style="color:#24292F;">        (renderer </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">createRenderer</span><span style="color:#24292F;">(rendererOptions)));</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-createrenderer" tabindex="-1"><a class="header-anchor" href="#_2-1-createrenderer" aria-hidden="true">#</a> 2.1 createRenderer</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">createRenderer</span><span style="color:#24292F;">(</span><span style="color:#953800;">options</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">baseCreateRenderer</span><span style="color:#24292F;">(options);</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-2-basecreaterenderer" tabindex="-1"><a class="header-anchor" href="#_2-2-basecreaterenderer" aria-hidden="true">#</a> 2.2 baseCreateRenderer</h2><p>baseCreateRenderer\u7684\u6838\u5FC3\u5C31\u662F\u95ED\u5305\uFF0C\u8FD4\u56DE\u6E32\u67D3\u51FD\u6570\u548C\u521B\u5EFAapp\u7684\u51FD\u6570</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">baseCreateRenderer</span><span style="color:#24292F;">(</span><span style="color:#953800;">options</span><span style="color:#24292F;">, </span><span style="color:#953800;">createHydrationFns</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">target</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">getGlobalThis</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">    target.__VUE__ </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">    {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">setDevtoolsHook</span><span style="color:#24292F;">(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);</span></span>
<span class="line"><span style="color:#24292F;">    }</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#953800;">insert</span><span style="color:#24292F;">: </span><span style="color:#0550AE;">hostInsert</span><span style="color:#24292F;">, </span><span style="color:#953800;">remove</span><span style="color:#24292F;">: </span><span style="color:#0550AE;">hostRemove</span><span style="color:#24292F;">, </span><span style="color:#953800;">patchProp</span><span style="color:#24292F;">: </span><span style="color:#0550AE;">hostPatchProp</span><span style="color:#24292F;">, </span><span style="color:#953800;">createElement</span><span style="color:#24292F;">: </span><span style="color:#0550AE;">hostCreateElement</span><span style="color:#24292F;">, </span><span style="color:#953800;">createText</span><span style="color:#24292F;">: </span><span style="color:#0550AE;">hostCreateText</span><span style="color:#24292F;">, </span><span style="color:#953800;">createComment</span><span style="color:#24292F;">: </span><span style="color:#0550AE;">hostCreateComment</span><span style="color:#24292F;">, </span><span style="color:#953800;">setText</span><span style="color:#24292F;">: </span><span style="color:#0550AE;">hostSetText</span><span style="color:#24292F;">, </span><span style="color:#953800;">setElementText</span><span style="color:#24292F;">: </span><span style="color:#0550AE;">hostSetElementText</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentNode</span><span style="color:#24292F;">: </span><span style="color:#0550AE;">hostParentNode</span><span style="color:#24292F;">, </span><span style="color:#953800;">nextSibling</span><span style="color:#24292F;">: </span><span style="color:#0550AE;">hostNextSibling</span><span style="color:#24292F;">, </span><span style="color:#953800;">setScopeId</span><span style="color:#24292F;">: </span><span style="color:#0550AE;">hostSetScopeId</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">NOOP</span><span style="color:#24292F;">, </span><span style="color:#953800;">insertStaticContent</span><span style="color:#24292F;">: </span><span style="color:#0550AE;">hostInsertStaticContent</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> options;</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// Note: functions inside this closure should use \`const xxx = () =&gt; {}\`</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// style in order to prevent being inlined by minifiers.</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">patch</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">n1</span><span style="color:#24292F;">, </span><span style="color:#953800;">n2</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">, </span><span style="color:#953800;">slotScopeIds</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> isHmrUpdating </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!!</span><span style="color:#24292F;">n2.dynamicChildren) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (n1 </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> n2) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// patching &amp; not same type, unmount old tree</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (n1 </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#8250DF;">isSameVNodeType</span><span style="color:#24292F;">(n1, n2)) {</span></span>
<span class="line"><span style="color:#24292F;">            anchor </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">getNextHostNode</span><span style="color:#24292F;">(n1);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">unmount</span><span style="color:#24292F;">(n1, parentComponent, parentSuspense, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">            n1 </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (n2.patchFlag </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">-</span><span style="color:#0550AE;">2</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.BAIL */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            optimized </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            n2.dynamicChildren </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">type</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">ref</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">shapeFlag</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n2;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">switch</span><span style="color:#24292F;"> (type) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">case</span><span style="color:#24292F;"> Text:</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">processText</span><span style="color:#24292F;">(n1, n2, container, anchor);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">break</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">case</span><span style="color:#24292F;"> Comment:</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">processCommentNode</span><span style="color:#24292F;">(n1, n2, container, anchor);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">break</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">case</span><span style="color:#24292F;"> Static:</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (n1 </span><span style="color:#CF222E;">==</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">mountStaticNode</span><span style="color:#24292F;">(n2, container, anchor, isSVG);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">patchStaticNode</span><span style="color:#24292F;">(n1, n2, container, isSVG);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">break</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">case</span><span style="color:#24292F;"> Fragment:</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">processFragment</span><span style="color:#24292F;">(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">break</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">default</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.ELEMENT */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">processElement</span><span style="color:#24292F;">(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">6</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.COMPONENT */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">processComponent</span><span style="color:#24292F;">(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">64</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.TELEPORT */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    type.</span><span style="color:#8250DF;">process</span><span style="color:#24292F;">(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">128</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.SUSPENSE */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    type.</span><span style="color:#8250DF;">process</span><span style="color:#24292F;">(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">warn$1</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&#39;Invalid VNode type:&#39;</span><span style="color:#24292F;">, type, </span><span style="color:#0A3069;">\`(\${</span><span style="color:#CF222E;">typeof</span><span style="color:#0A3069;"> </span><span style="color:#24292F;">type</span><span style="color:#0A3069;">})\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// set ref</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (ref </span><span style="color:#CF222E;">!=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> parentComponent) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">setRef</span><span style="color:#24292F;">(ref, n1 </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> n1.ref, parentSuspense, n2 </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> n1, </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">n2);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">processText</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">n1</span><span style="color:#24292F;">, </span><span style="color:#953800;">n2</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (n1 </span><span style="color:#CF222E;">==</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">hostInsert</span><span style="color:#24292F;">((n2.el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hostCreateText</span><span style="color:#24292F;">(n2.children)), container, anchor);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">el</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (n2.el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n1.el);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (n2.children </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> n1.children) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">hostSetText</span><span style="color:#24292F;">(el, n2.children);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">processCommentNode</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">n1</span><span style="color:#24292F;">, </span><span style="color:#953800;">n2</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (n1 </span><span style="color:#CF222E;">==</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">hostInsert</span><span style="color:#24292F;">((n2.el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hostCreateComment</span><span style="color:#24292F;">(n2.children </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;&#39;</span><span style="color:#24292F;">)), container, anchor);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// there&#39;s no support for dynamic comments</span></span>
<span class="line"><span style="color:#24292F;">            n2.el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n1.el;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">mountStaticNode</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">n2</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        [n2.el, n2.anchor] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hostInsertStaticContent</span><span style="color:#24292F;">(n2.children, container, anchor, isSVG, n2.el, n2.anchor);</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">/**</span></span>
<span class="line"><span style="color:#6E7781;">     * Dev / HMR only</span></span>
<span class="line"><span style="color:#6E7781;">     */</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">patchStaticNode</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">n1</span><span style="color:#24292F;">, </span><span style="color:#953800;">n2</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// static nodes are only patched during dev for HMR</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (n2.children </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> n1.children) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">anchor</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hostNextSibling</span><span style="color:#24292F;">(n1.anchor);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// remove existing</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">removeStaticNode</span><span style="color:#24292F;">(n1);</span></span>
<span class="line"><span style="color:#24292F;">            [n2.el, n2.anchor] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hostInsertStaticContent</span><span style="color:#24292F;">(n2.children, container, anchor, isSVG);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            n2.el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n1.el;</span></span>
<span class="line"><span style="color:#24292F;">            n2.anchor </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n1.anchor;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">moveStaticNode</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> ({ </span><span style="color:#953800;">el</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;"> }, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">nextSibling</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> next;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">while</span><span style="color:#24292F;"> (el </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> el </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> anchor) {</span></span>
<span class="line"><span style="color:#24292F;">            next </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hostNextSibling</span><span style="color:#24292F;">(el);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">hostInsert</span><span style="color:#24292F;">(el, container, nextSibling);</span></span>
<span class="line"><span style="color:#24292F;">            el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> next;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">hostInsert</span><span style="color:#24292F;">(anchor, container, nextSibling);</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">removeStaticNode</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> ({ </span><span style="color:#953800;">el</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;"> }) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> next;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">while</span><span style="color:#24292F;"> (el </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> el </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> anchor) {</span></span>
<span class="line"><span style="color:#24292F;">            next </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hostNextSibling</span><span style="color:#24292F;">(el);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">hostRemove</span><span style="color:#24292F;">(el);</span></span>
<span class="line"><span style="color:#24292F;">            el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> next;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">hostRemove</span><span style="color:#24292F;">(anchor);</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">processElement</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">n1</span><span style="color:#24292F;">, </span><span style="color:#953800;">n2</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">, </span><span style="color:#953800;">slotScopeIds</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        isSVG </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> isSVG </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> n2.type </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;svg&#39;</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (n1 </span><span style="color:#CF222E;">==</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">mountElement</span><span style="color:#24292F;">(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">patchElement</span><span style="color:#24292F;">(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">mountElement</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">vnode</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">, </span><span style="color:#953800;">slotScopeIds</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> el;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> vnodeHook;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">type</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">props</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">shapeFlag</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">transition</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">dirs</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> vnode;</span></span>
<span class="line"><span style="color:#24292F;">        el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> vnode.el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hostCreateElement</span><span style="color:#24292F;">(vnode.type, isSVG, props </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> props.is, props);</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// mount children first, since some props may rely on child content</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// being already rendered, e.g. \`&lt;select value&gt;\`</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">8</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.TEXT_CHILDREN */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">hostSetElementText</span><span style="color:#24292F;">(el, vnode.children);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">16</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.ARRAY_CHILDREN */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">mountChildren</span><span style="color:#24292F;">(vnode.children, el, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, parentComponent, parentSuspense, isSVG </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> type </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;foreignObject&#39;</span><span style="color:#24292F;">, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (dirs) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">invokeDirectiveHook</span><span style="color:#24292F;">(vnode, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, parentComponent, </span><span style="color:#0A3069;">&#39;created&#39;</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// props</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (props) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">key</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">in</span><span style="color:#24292F;"> props) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (key </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;value&#39;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#8250DF;">isReservedProp</span><span style="color:#24292F;">(key)) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">hostPatchProp</span><span style="color:#24292F;">(el, key, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">/**</span></span>
<span class="line"><span style="color:#6E7781;">             * Special case for setting value on DOM elements:</span></span>
<span class="line"><span style="color:#6E7781;">             * - it can be order-sensitive (e.g. should be set *after* min/max, #2325, #4024)</span></span>
<span class="line"><span style="color:#6E7781;">             * - it needs to be forced (#1471)</span></span>
<span class="line"><span style="color:#6E7781;">             * #2353 proposes adding another renderer option to configure this, but</span></span>
<span class="line"><span style="color:#6E7781;">             * the properties affects are so finite it is worth special casing it</span></span>
<span class="line"><span style="color:#6E7781;">             * here to reduce the complexity. (Special casing it also should not</span></span>
<span class="line"><span style="color:#6E7781;">             * affect non-DOM renderers)</span></span>
<span class="line"><span style="color:#6E7781;">             */</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#0A3069;">&#39;value&#39;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">in</span><span style="color:#24292F;"> props) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">hostPatchProp</span><span style="color:#24292F;">(el, </span><span style="color:#0A3069;">&#39;value&#39;</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, props.value);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> ((vnodeHook </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> props.onVnodeBeforeMount)) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">invokeVNodeHook</span><span style="color:#24292F;">(vnodeHook, parentComponent, vnode);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// scopeId</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">setScopeId</span><span style="color:#24292F;">(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);</span></span>
<span class="line"><span style="color:#24292F;">        {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#0550AE;">Object</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">defineProperty</span><span style="color:#24292F;">(el, </span><span style="color:#0A3069;">&#39;__vnode&#39;</span><span style="color:#24292F;">, {</span></span>
<span class="line"><span style="color:#24292F;">                value: vnode,</span></span>
<span class="line"><span style="color:#24292F;">                enumerable: </span><span style="color:#0550AE;">false</span></span>
<span class="line"><span style="color:#24292F;">            });</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#0550AE;">Object</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">defineProperty</span><span style="color:#24292F;">(el, </span><span style="color:#0A3069;">&#39;__vueParentComponent&#39;</span><span style="color:#24292F;">, {</span></span>
<span class="line"><span style="color:#24292F;">                value: parentComponent,</span></span>
<span class="line"><span style="color:#24292F;">                enumerable: </span><span style="color:#0550AE;">false</span></span>
<span class="line"><span style="color:#24292F;">            });</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (dirs) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">invokeDirectiveHook</span><span style="color:#24292F;">(vnode, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, parentComponent, </span><span style="color:#0A3069;">&#39;beforeMount&#39;</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// #1689 For inside suspense + suspense resolved case, just call it</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">needCallTransitionHooks</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">parentSuspense </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> (parentSuspense </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">parentSuspense.pendingBranch)) </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            transition </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">transition.persisted;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (needCallTransitionHooks) {</span></span>
<span class="line"><span style="color:#24292F;">            transition.</span><span style="color:#8250DF;">beforeEnter</span><span style="color:#24292F;">(el);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">hostInsert</span><span style="color:#24292F;">(el, container, anchor);</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> ((vnodeHook </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> props </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> props.onVnodeMounted) </span><span style="color:#CF222E;">||</span></span>
<span class="line"><span style="color:#24292F;">            needCallTransitionHooks </span><span style="color:#CF222E;">||</span></span>
<span class="line"><span style="color:#24292F;">            dirs) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">queuePostRenderEffect</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                vnodeHook </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">invokeVNodeHook</span><span style="color:#24292F;">(vnodeHook, parentComponent, vnode);</span></span>
<span class="line"><span style="color:#24292F;">                needCallTransitionHooks </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> transition.</span><span style="color:#8250DF;">enter</span><span style="color:#24292F;">(el);</span></span>
<span class="line"><span style="color:#24292F;">                dirs </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">invokeDirectiveHook</span><span style="color:#24292F;">(vnode, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, parentComponent, </span><span style="color:#0A3069;">&#39;mounted&#39;</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">            }, parentSuspense);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">setScopeId</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">el</span><span style="color:#24292F;">, </span><span style="color:#953800;">vnode</span><span style="color:#24292F;">, </span><span style="color:#953800;">scopeId</span><span style="color:#24292F;">, </span><span style="color:#953800;">slotScopeIds</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (scopeId) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">hostSetScopeId</span><span style="color:#24292F;">(el, scopeId);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (slotScopeIds) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">; i </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> slotScopeIds.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">; i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">hostSetScopeId</span><span style="color:#24292F;">(el, slotScopeIds[i]);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (parentComponent) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> subTree </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> parentComponent.subTree;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (subTree.patchFlag </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                subTree.patchFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2048</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.DEV_ROOT_FRAGMENT */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                subTree </span><span style="color:#CF222E;">=</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">filterSingleRoot</span><span style="color:#24292F;">(subTree.children) </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> subTree;</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (vnode </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> subTree) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">parentVNode</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> parentComponent.vnode;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">setScopeId</span><span style="color:#24292F;">(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">mountChildren</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">children</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">, </span><span style="color:#953800;">slotScopeIds</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;">, </span><span style="color:#953800;">start</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> start; i </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> children.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">; i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">child</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (children[i] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> optimized</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">cloneIfMounted</span><span style="color:#24292F;">(children[i])</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">normalizeVNode</span><span style="color:#24292F;">(children[i]));</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">patch</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">patchElement</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">n1</span><span style="color:#24292F;">, </span><span style="color:#953800;">n2</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">, </span><span style="color:#953800;">slotScopeIds</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">el</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (n2.el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n1.el);</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> { patchFlag, dynamicChildren, dirs } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n2;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// #1426 take the old vnode&#39;s patch flag into account since user may clone a</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// compiler-generated vnode, which de-opts to FULL_PROPS</span></span>
<span class="line"><span style="color:#24292F;">        patchFlag </span><span style="color:#CF222E;">|=</span><span style="color:#24292F;"> n1.patchFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">16</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.FULL_PROPS */</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">oldProps</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n1.props </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">EMPTY_OBJ</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">newProps</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n2.props </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">EMPTY_OBJ</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> vnodeHook;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// disable recurse in beforeUpdate hooks</span></span>
<span class="line"><span style="color:#24292F;">        parentComponent </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">toggleRecurse</span><span style="color:#24292F;">(parentComponent, </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> ((vnodeHook </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> newProps.onVnodeBeforeUpdate)) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">invokeVNodeHook</span><span style="color:#24292F;">(vnodeHook, parentComponent, n2, n1);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (dirs) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">invokeDirectiveHook</span><span style="color:#24292F;">(n2, n1, parentComponent, </span><span style="color:#0A3069;">&#39;beforeUpdate&#39;</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        parentComponent </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">toggleRecurse</span><span style="color:#24292F;">(parentComponent, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (isHmrUpdating) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// HMR updated, force full diff</span></span>
<span class="line"><span style="color:#24292F;">            patchFlag </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            optimized </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            dynamicChildren </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">areChildrenSVG</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> isSVG </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> n2.type </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;foreignObject&#39;</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (dynamicChildren) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">patchBlockChildren</span><span style="color:#24292F;">(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (parentComponent </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> parentComponent.type.__hmrId) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">traverseStaticChildren</span><span style="color:#24292F;">(n1, n2);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">optimized) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// full diff</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">patchChildren</span><span style="color:#24292F;">(n1, n2, el, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (patchFlag </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// the presence of a patchFlag means this element&#39;s render code was</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// generated by the compiler and can take the fast path.</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// in this path old node and new node are guaranteed to have the same shape</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// (i.e. at the exact same position in the source template)</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (patchFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">16</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.FULL_PROPS */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// element props contain dynamic keys, full diff needed</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">patchProps</span><span style="color:#24292F;">(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// class</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// this flag is matched when the element has dynamic class bindings.</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (patchFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.CLASS */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (oldProps.class </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> newProps.class) {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">hostPatchProp</span><span style="color:#24292F;">(el, </span><span style="color:#0A3069;">&#39;class&#39;</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, newProps.class, isSVG);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// style</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// this flag is matched when the element has dynamic style bindings</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (patchFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">4</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.STYLE */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">hostPatchProp</span><span style="color:#24292F;">(el, </span><span style="color:#0A3069;">&#39;style&#39;</span><span style="color:#24292F;">, oldProps.style, newProps.style, isSVG);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// props</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// This flag is matched when the element has dynamic prop/attr bindings</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// other than class and style. The keys of dynamic prop/attrs are saved for</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// faster iteration.</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// Note dynamic keys like :[foo]=&quot;bar&quot; will cause this optimization to</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// bail out and go through a full diff because we need to unset the old key</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (patchFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">8</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.PROPS */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// if the flag is present then dynamicProps must be non-null</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">propsToUpdate</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n2.dynamicProps;</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">; i </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> propsToUpdate.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">; i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">key</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> propsToUpdate[i];</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">prev</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> oldProps[key];</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">next</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> newProps[key];</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#6E7781;">// #1471 force patch value</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (next </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> prev </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> key </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;value&#39;</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                            </span><span style="color:#8250DF;">hostPatchProp</span><span style="color:#24292F;">(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);</span></span>
<span class="line"><span style="color:#24292F;">                        }</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// text</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// This flag is matched when the element has only dynamic text children.</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (patchFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.TEXT */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (n1.children </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> n2.children) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">hostSetElementText</span><span style="color:#24292F;">(el, n2.children);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">optimized </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> dynamicChildren </span><span style="color:#CF222E;">==</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// unoptimized, full diff</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">patchProps</span><span style="color:#24292F;">(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> ((vnodeHook </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> newProps.onVnodeUpdated) </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> dirs) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">queuePostRenderEffect</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                vnodeHook </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">invokeVNodeHook</span><span style="color:#24292F;">(vnodeHook, parentComponent, n2, n1);</span></span>
<span class="line"><span style="color:#24292F;">                dirs </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">invokeDirectiveHook</span><span style="color:#24292F;">(n2, n1, parentComponent, </span><span style="color:#0A3069;">&#39;updated&#39;</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">            }, parentSuspense);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// The fast path for blocks.</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">patchBlockChildren</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">oldChildren</span><span style="color:#24292F;">, </span><span style="color:#953800;">newChildren</span><span style="color:#24292F;">, </span><span style="color:#953800;">fallbackContainer</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">, </span><span style="color:#953800;">slotScopeIds</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">; i </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> newChildren.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">; i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">oldVNode</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> oldChildren[i];</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">newVNode</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> newChildren[i];</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// Determine the container (parent element) for the patch.</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">container</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// oldVNode may be an errored async setup() component inside Suspense</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// which will not have a mounted element</span></span>
<span class="line"><span style="color:#24292F;">            oldVNode.el </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// - In the case of a Fragment, we need to provide the actual parent</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// of the Fragment itself so it can move its children.</span></span>
<span class="line"><span style="color:#24292F;">                (oldVNode.type </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> Fragment </span><span style="color:#CF222E;">||</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// - In the case of different nodes, there is going to be a replacement</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// which also requires the correct parent container</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">!</span><span style="color:#8250DF;">isSameVNodeType</span><span style="color:#24292F;">(oldVNode, newVNode) </span><span style="color:#CF222E;">||</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// - In the case of a component, it could contain anything.</span></span>
<span class="line"><span style="color:#24292F;">                    oldVNode.shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> (</span><span style="color:#0550AE;">6</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.COMPONENT */</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">|</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">64</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.TELEPORT */</span><span style="color:#24292F;">))</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hostParentNode</span><span style="color:#24292F;">(oldVNode.el)</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">// In other cases, the parent container is not actually used so we</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// just pass the block element here to avoid a DOM parentNode call.</span></span>
<span class="line"><span style="color:#24292F;">                    fallbackContainer;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">patch</span><span style="color:#24292F;">(oldVNode, newVNode, container, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, parentComponent, parentSuspense, isSVG, slotScopeIds, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">patchProps</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">el</span><span style="color:#24292F;">, </span><span style="color:#953800;">vnode</span><span style="color:#24292F;">, </span><span style="color:#953800;">oldProps</span><span style="color:#24292F;">, </span><span style="color:#953800;">newProps</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (oldProps </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> newProps) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (oldProps </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">EMPTY_OBJ</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">key</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">in</span><span style="color:#24292F;"> oldProps) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#8250DF;">isReservedProp</span><span style="color:#24292F;">(key) </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">(key </span><span style="color:#CF222E;">in</span><span style="color:#24292F;"> newProps)) {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">hostPatchProp</span><span style="color:#24292F;">(el, key, oldProps[key], </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">key</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">in</span><span style="color:#24292F;"> newProps) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// empty string is not valid prop</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#8250DF;">isReservedProp</span><span style="color:#24292F;">(key))</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">continue</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">next</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> newProps[key];</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">prev</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> oldProps[key];</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// defer patching value</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (next </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> prev </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> key </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;value&#39;</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">hostPatchProp</span><span style="color:#24292F;">(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#0A3069;">&#39;value&#39;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">in</span><span style="color:#24292F;"> newProps) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">hostPatchProp</span><span style="color:#24292F;">(el, </span><span style="color:#0A3069;">&#39;value&#39;</span><span style="color:#24292F;">, oldProps.value, newProps.value);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">processFragment</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">n1</span><span style="color:#24292F;">, </span><span style="color:#953800;">n2</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">, </span><span style="color:#953800;">slotScopeIds</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">fragmentStartAnchor</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (n2.el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n1 </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> n1.el </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hostCreateText</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&#39;&#39;</span><span style="color:#24292F;">));</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">fragmentEndAnchor</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (n2.anchor </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n1 </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> n1.anchor </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hostCreateText</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&#39;&#39;</span><span style="color:#24292F;">));</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> { patchFlag, dynamicChildren, </span><span style="color:#953800;">slotScopeIds</span><span style="color:#24292F;">: fragmentSlotScopeIds } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n2;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#6E7781;">// #5523 dev root fragment may inherit directives</span></span>
<span class="line"><span style="color:#24292F;">            (isHmrUpdating </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> patchFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2048</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.DEV_ROOT_FRAGMENT */</span><span style="color:#24292F;">)) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// HMR updated / Dev root fragment (w/ comments), force full diff</span></span>
<span class="line"><span style="color:#24292F;">            patchFlag </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            optimized </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            dynamicChildren </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// check if this is a slot fragment with :slotted scope ids</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (fragmentSlotScopeIds) {</span></span>
<span class="line"><span style="color:#24292F;">            slotScopeIds </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> slotScopeIds</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> slotScopeIds.</span><span style="color:#8250DF;">concat</span><span style="color:#24292F;">(fragmentSlotScopeIds)</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> fragmentSlotScopeIds;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (n1 </span><span style="color:#CF222E;">==</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">hostInsert</span><span style="color:#24292F;">(fragmentStartAnchor, container, anchor);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">hostInsert</span><span style="color:#24292F;">(fragmentEndAnchor, container, anchor);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// a fragment can only have array children</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// since they are either generated by the compiler, or implicitly created</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// from arrays.</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">mountChildren</span><span style="color:#24292F;">(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (patchFlag </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                patchFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">64</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.STABLE_FRAGMENT */</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                dynamicChildren </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// #2715 the previous fragment could&#39;ve been a BAILed one as a result</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// of renderSlot() with no valid children</span></span>
<span class="line"><span style="color:#24292F;">                n1.dynamicChildren) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// a stable fragment (template root or &lt;template v-for&gt;) doesn&#39;t need to</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// patch children order, but it may contain dynamicChildren.</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">patchBlockChildren</span><span style="color:#24292F;">(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (parentComponent </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> parentComponent.type.__hmrId) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">traverseStaticChildren</span><span style="color:#24292F;">(n1, n2);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// #2080 if the stable fragment has a key, it&#39;s a &lt;template v-for&gt; that may</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">//  get moved around. Make sure all root level vnodes inherit el.</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// #2134 or if it&#39;s a component root, it may also get moved around</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// as the component is being moved.</span></span>
<span class="line"><span style="color:#24292F;">                n2.key </span><span style="color:#CF222E;">!=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">||</span></span>
<span class="line"><span style="color:#24292F;">                    (parentComponent </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> n2 </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> parentComponent.subTree)) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">traverseStaticChildren</span><span style="color:#24292F;">(n1, n2, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* shallow */</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// keyed / unkeyed, or manual fragments.</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// for keyed &amp; unkeyed, since they are compiler generated from v-for,</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// each child is guaranteed to be a block so the fragment will never</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// have dynamicChildren.</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">patchChildren</span><span style="color:#24292F;">(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">processComponent</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">n1</span><span style="color:#24292F;">, </span><span style="color:#953800;">n2</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">, </span><span style="color:#953800;">slotScopeIds</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        n2.slotScopeIds </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> slotScopeIds;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (n1 </span><span style="color:#CF222E;">==</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (n2.shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">512</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.COMPONENT_KEPT_ALIVE */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                parentComponent.ctx.</span><span style="color:#8250DF;">activate</span><span style="color:#24292F;">(n2, container, anchor, isSVG, optimized);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">mountComponent</span><span style="color:#24292F;">(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">updateComponent</span><span style="color:#24292F;">(n1, n2, optimized);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">mountComponent</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">initialVNode</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">instance</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (initialVNode.component </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">createComponentInstance</span><span style="color:#24292F;">(initialVNode, parentComponent, parentSuspense));</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (instance.type.__hmrId) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">registerHMR</span><span style="color:#24292F;">(instance);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">pushWarningContext</span><span style="color:#24292F;">(initialVNode);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">startMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`mount\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// inject renderer internals for keepAlive</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#8250DF;">isKeepAlive</span><span style="color:#24292F;">(initialVNode)) {</span></span>
<span class="line"><span style="color:#24292F;">            instance.ctx.renderer </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> internals;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// resolve props and slots for setup context</span></span>
<span class="line"><span style="color:#24292F;">        {</span></span>
<span class="line"><span style="color:#24292F;">            {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">startMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`init\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">setupComponent</span><span style="color:#24292F;">(instance);</span></span>
<span class="line"><span style="color:#24292F;">            {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">endMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`init\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// setup() is async. This component relies on async logic to be resolved</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// before proceeding</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (instance.asyncDep) {</span></span>
<span class="line"><span style="color:#24292F;">            parentSuspense </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> parentSuspense.</span><span style="color:#8250DF;">registerDep</span><span style="color:#24292F;">(instance, setupRenderEffect);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// Give it a placeholder if this is not hydration</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// TODO handle self-defined fallback</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">initialVNode.el) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">placeholder</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (instance.subTree </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">createVNode</span><span style="color:#24292F;">(Comment));</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">processCommentNode</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, placeholder, container, anchor);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">setupRenderEffect</span><span style="color:#24292F;">(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);</span></span>
<span class="line"><span style="color:#24292F;">        {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">popWarningContext</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">endMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`mount\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">updateComponent</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">n1</span><span style="color:#24292F;">, </span><span style="color:#953800;">n2</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">instance</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (n2.component </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n1.component);</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#8250DF;">shouldUpdateComponent</span><span style="color:#24292F;">(n1, n2, optimized)) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (instance.asyncDep </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">instance.asyncResolved) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// async &amp; still pending - just update props and slots</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// since the component&#39;s reactive effect for render isn&#39;t set-up yet</span></span>
<span class="line"><span style="color:#24292F;">                {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">pushWarningContext</span><span style="color:#24292F;">(n2);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">updateComponentPreRender</span><span style="color:#24292F;">(instance, n2, optimized);</span></span>
<span class="line"><span style="color:#24292F;">                {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">popWarningContext</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// normal update</span></span>
<span class="line"><span style="color:#24292F;">                instance.next </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n2;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// in case the child component is also queued, remove it to avoid</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// double updating the same child component in the same flush.</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">invalidateJob</span><span style="color:#24292F;">(instance.update);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// instance.update is the reactive effect.</span></span>
<span class="line"><span style="color:#24292F;">                instance.</span><span style="color:#8250DF;">update</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// no update needed. just copy over properties</span></span>
<span class="line"><span style="color:#24292F;">            n2.el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n1.el;</span></span>
<span class="line"><span style="color:#24292F;">            instance.vnode </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n2;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">setupRenderEffect</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">instance</span><span style="color:#24292F;">, </span><span style="color:#953800;">initialVNode</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">componentUpdateFn</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">instance.isMounted) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> vnodeHook;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">el</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">props</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> initialVNode;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">bm</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">m</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">parent</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> instance;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">isAsyncWrapperVNode</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">isAsyncWrapper</span><span style="color:#24292F;">(initialVNode);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">toggleRecurse</span><span style="color:#24292F;">(instance, </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// beforeMount hook</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (bm) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">invokeArrayFns</span><span style="color:#24292F;">(bm);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// onVnodeBeforeMount</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">isAsyncWrapperVNode </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                    (vnodeHook </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> props </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> props.onVnodeBeforeMount)) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">invokeVNodeHook</span><span style="color:#24292F;">(vnodeHook, parent, initialVNode);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">toggleRecurse</span><span style="color:#24292F;">(instance, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (el </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> hydrateNode) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// vnode has adopted host node - perform hydration instead of mount.</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hydrateSubTree</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                        {</span></span>
<span class="line"><span style="color:#24292F;">                            </span><span style="color:#8250DF;">startMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`render\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                        }</span></span>
<span class="line"><span style="color:#24292F;">                        instance.subTree </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">renderComponentRoot</span><span style="color:#24292F;">(instance);</span></span>
<span class="line"><span style="color:#24292F;">                        {</span></span>
<span class="line"><span style="color:#24292F;">                            </span><span style="color:#8250DF;">endMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`render\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                        }</span></span>
<span class="line"><span style="color:#24292F;">                        {</span></span>
<span class="line"><span style="color:#24292F;">                            </span><span style="color:#8250DF;">startMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`hydrate\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                        }</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">hydrateNode</span><span style="color:#24292F;">(el, instance.subTree, instance, parentSuspense, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                        {</span></span>
<span class="line"><span style="color:#24292F;">                            </span><span style="color:#8250DF;">endMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`hydrate\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                        }</span></span>
<span class="line"><span style="color:#24292F;">                    };</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (isAsyncWrapperVNode) {</span></span>
<span class="line"><span style="color:#24292F;">                        initialVNode.type.</span><span style="color:#8250DF;">__asyncLoader</span><span style="color:#24292F;">().</span><span style="color:#8250DF;">then</span><span style="color:#24292F;">(</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#6E7781;">// note: we are moving the render call into an async callback,</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#6E7781;">// which means it won&#39;t track dependencies - but it&#39;s ok because</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#6E7781;">// a server-rendered async wrapper is already in resolved state</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#6E7781;">// and it will never need to change.</span></span>
<span class="line"><span style="color:#24292F;">                        () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">instance.isUnmounted </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hydrateSubTree</span><span style="color:#24292F;">());</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">hydrateSubTree</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                    {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">startMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`render\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">subTree</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (instance.subTree </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">renderComponentRoot</span><span style="color:#24292F;">(instance));</span></span>
<span class="line"><span style="color:#24292F;">                    {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">endMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`render\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">startMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`patch\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">patch</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, subTree, container, anchor, instance, parentSuspense, isSVG);</span></span>
<span class="line"><span style="color:#24292F;">                    {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">endMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`patch\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    initialVNode.el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> subTree.el;</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// mounted hook</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (m) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">queuePostRenderEffect</span><span style="color:#24292F;">(m, parentSuspense);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// onVnodeMounted</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">isAsyncWrapperVNode </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                    (vnodeHook </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> props </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> props.onVnodeMounted)) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">scopedInitialVNode</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> initialVNode;</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">queuePostRenderEffect</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">invokeVNodeHook</span><span style="color:#24292F;">(vnodeHook, parent, scopedInitialVNode), parentSuspense);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// activated hook for keep-alive roots.</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// #1742 activated hook must be accessed after first render</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// since the hook may be injected by a child keep-alive</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (initialVNode.shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">256</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.COMPONENT_SHOULD_KEEP_ALIVE */</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">||</span></span>
<span class="line"><span style="color:#24292F;">                    (parent </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">isAsyncWrapper</span><span style="color:#24292F;">(parent.vnode) </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                        parent.vnode.shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">256</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.COMPONENT_SHOULD_KEEP_ALIVE */</span><span style="color:#24292F;">)) {</span></span>
<span class="line"><span style="color:#24292F;">                    instance.a </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">queuePostRenderEffect</span><span style="color:#24292F;">(instance.a, parentSuspense);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                instance.isMounted </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">                {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">devtoolsComponentAdded</span><span style="color:#24292F;">(instance);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// #2458: deference mount-only object parameters to prevent memleaks</span></span>
<span class="line"><span style="color:#24292F;">                initialVNode </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> container </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> anchor </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// updateComponent</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// This is triggered by mutation of component&#39;s own state (next: null)</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// OR parent calling processComponent (next: VNode)</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> { next, bu, u, parent, vnode } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> instance;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> originNext </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> next;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> vnodeHook;</span></span>
<span class="line"><span style="color:#24292F;">                {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">pushWarningContext</span><span style="color:#24292F;">(next </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> instance.vnode);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// Disallow component effect recursion during pre-lifecycle hooks.</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">toggleRecurse</span><span style="color:#24292F;">(instance, </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (next) {</span></span>
<span class="line"><span style="color:#24292F;">                    next.el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> vnode.el;</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">updateComponentPreRender</span><span style="color:#24292F;">(instance, next, optimized);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                    next </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> vnode;</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// beforeUpdate hook</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (bu) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">invokeArrayFns</span><span style="color:#24292F;">(bu);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// onVnodeBeforeUpdate</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> ((vnodeHook </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> next.props </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> next.props.onVnodeBeforeUpdate)) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">invokeVNodeHook</span><span style="color:#24292F;">(vnodeHook, parent, next, vnode);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">toggleRecurse</span><span style="color:#24292F;">(instance, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// render</span></span>
<span class="line"><span style="color:#24292F;">                {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">startMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`render\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">nextTree</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">renderComponentRoot</span><span style="color:#24292F;">(instance);</span></span>
<span class="line"><span style="color:#24292F;">                {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">endMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`render\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">prevTree</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> instance.subTree;</span></span>
<span class="line"><span style="color:#24292F;">                instance.subTree </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> nextTree;</span></span>
<span class="line"><span style="color:#24292F;">                {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">startMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`patch\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">patch</span><span style="color:#24292F;">(prevTree, nextTree, </span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// parent may have changed if it&#39;s in a teleport</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">hostParentNode</span><span style="color:#24292F;">(prevTree.el), </span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// anchor may have changed if it&#39;s in a fragment</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">getNextHostNode</span><span style="color:#24292F;">(prevTree), instance, parentSuspense, isSVG);</span></span>
<span class="line"><span style="color:#24292F;">                {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">endMeasure</span><span style="color:#24292F;">(instance, </span><span style="color:#0A3069;">\`patch\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                next.el </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> nextTree.el;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (originNext </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// self-triggered update. In case of HOC, update parent component</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// vnode el. HOC is indicated by parent instance&#39;s subTree pointing</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// to child component&#39;s vnode</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">updateHOCHostEl</span><span style="color:#24292F;">(instance, nextTree.el);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// updated hook</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (u) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">queuePostRenderEffect</span><span style="color:#24292F;">(u, parentSuspense);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// onVnodeUpdated</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> ((vnodeHook </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> next.props </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> next.props.onVnodeUpdated)) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">queuePostRenderEffect</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">invokeVNodeHook</span><span style="color:#24292F;">(vnodeHook, parent, next, vnode), parentSuspense);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">devtoolsComponentUpdated</span><span style="color:#24292F;">(instance);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">popWarningContext</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        };</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// create reactive effect for rendering</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">effect</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (instance.effect </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">ReactiveEffect</span><span style="color:#24292F;">(componentUpdateFn, () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">queueJob</span><span style="color:#24292F;">(update), instance.scope </span><span style="color:#6E7781;">// track it in component&#39;s effect scope</span></span>
<span class="line"><span style="color:#24292F;">        ));</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">update</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (instance.</span><span style="color:#8250DF;">update</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> effect.</span><span style="color:#8250DF;">run</span><span style="color:#24292F;">());</span></span>
<span class="line"><span style="color:#24292F;">        update.id </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> instance.uid;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// allowRecurse</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// #1801, #2043 component render effects should allow recursive updates</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">toggleRecurse</span><span style="color:#24292F;">(instance, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">        {</span></span>
<span class="line"><span style="color:#24292F;">            effect.onTrack </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> instance.rtc</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#953800;">e</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">invokeArrayFns</span><span style="color:#24292F;">(instance.rtc, e)</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">void</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            effect.onTrigger </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> instance.rtg</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#953800;">e</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">invokeArrayFns</span><span style="color:#24292F;">(instance.rtg, e)</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">void</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            update.ownerInstance </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> instance;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">update</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">updateComponentPreRender</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">instance</span><span style="color:#24292F;">, </span><span style="color:#953800;">nextVNode</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        nextVNode.component </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> instance;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">prevProps</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> instance.vnode.props;</span></span>
<span class="line"><span style="color:#24292F;">        instance.vnode </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> nextVNode;</span></span>
<span class="line"><span style="color:#24292F;">        instance.next </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">updateProps</span><span style="color:#24292F;">(instance, nextVNode.props, prevProps, optimized);</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">updateSlots</span><span style="color:#24292F;">(instance, nextVNode.children, optimized);</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">pauseTracking</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// props update may have triggered pre-flush watchers.</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// flush them before the render update.</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">flushPreFlushCbs</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">resetTracking</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">patchChildren</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">n1</span><span style="color:#24292F;">, </span><span style="color:#953800;">n2</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">, </span><span style="color:#953800;">slotScopeIds</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">c1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n1 </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> n1.children;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">prevShapeFlag</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n1 </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> n1.shapeFlag </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">c2</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n2.children;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">patchFlag</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">shapeFlag</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> n2;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// fast path</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (patchFlag </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (patchFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">128</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.KEYED_FRAGMENT */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// this could be either fully-keyed or mixed (some keyed some not)</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// presence of patchFlag means children are guaranteed to be arrays</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">patchKeyedChildren</span><span style="color:#24292F;">(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (patchFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">256</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.UNKEYED_FRAGMENT */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// unkeyed</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">patchUnkeyedChildren</span><span style="color:#24292F;">(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// children has 3 possibilities: text, array or no children.</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">8</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.TEXT_CHILDREN */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// text children fast path</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (prevShapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">16</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.ARRAY_CHILDREN */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">unmountChildren</span><span style="color:#24292F;">(c1, parentComponent, parentSuspense);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (c2 </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> c1) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">hostSetElementText</span><span style="color:#24292F;">(container, c2);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (prevShapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">16</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.ARRAY_CHILDREN */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// prev children was array</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">16</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.ARRAY_CHILDREN */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// two arrays, cannot assume anything, do full diff</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">patchKeyedChildren</span><span style="color:#24292F;">(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// no new children, just unmount old</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">unmountChildren</span><span style="color:#24292F;">(c1, parentComponent, parentSuspense, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// prev children was text OR null</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// new children is array OR null</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (prevShapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">8</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.TEXT_CHILDREN */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">hostSetElementText</span><span style="color:#24292F;">(container, </span><span style="color:#0A3069;">&#39;&#39;</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// mount new if array</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">16</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.ARRAY_CHILDREN */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">mountChildren</span><span style="color:#24292F;">(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">patchUnkeyedChildren</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">c1</span><span style="color:#24292F;">, </span><span style="color:#953800;">c2</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">, </span><span style="color:#953800;">slotScopeIds</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        c1 </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> c1 </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">EMPTY_ARR</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        c2 </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> c2 </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">EMPTY_ARR</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">oldLength</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> c1.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">newLength</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> c2.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">commonLength</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Math</span><span style="color:#24292F;">.</span><span style="color:#0550AE;">min</span><span style="color:#24292F;">(oldLength, newLength);</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> i;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">; i </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> commonLength; i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">nextChild</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (c2[i] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> optimized</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">cloneIfMounted</span><span style="color:#24292F;">(c2[i])</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">normalizeVNode</span><span style="color:#24292F;">(c2[i]));</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">patch</span><span style="color:#24292F;">(c1[i], nextChild, container, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (oldLength </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> newLength) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// remove old</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">unmountChildren</span><span style="color:#24292F;">(c1, parentComponent, parentSuspense, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">, commonLength);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// mount new</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">mountChildren</span><span style="color:#24292F;">(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#6E7781;">// can be all-keyed or mixed</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">patchKeyedChildren</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">c1</span><span style="color:#24292F;">, </span><span style="color:#953800;">c2</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentAnchor</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">, </span><span style="color:#953800;">slotScopeIds</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">l2</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> c2.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> e1 </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> c1.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">-</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// prev ending index</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> e2 </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> l2 </span><span style="color:#CF222E;">-</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">; </span><span style="color:#6E7781;">// next ending index</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// 1. sync from start</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// (a b) c</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// (a b) d e</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">while</span><span style="color:#24292F;"> (i </span><span style="color:#CF222E;">&lt;=</span><span style="color:#24292F;"> e1 </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">&lt;=</span><span style="color:#24292F;"> e2) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">n1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> c1[i];</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">n2</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (c2[i] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> optimized</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">cloneIfMounted</span><span style="color:#24292F;">(c2[i])</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">normalizeVNode</span><span style="color:#24292F;">(c2[i]));</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#8250DF;">isSameVNodeType</span><span style="color:#24292F;">(n1, n2)) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">patch</span><span style="color:#24292F;">(n1, n2, container, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">break</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// 2. sync from end</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// a (b c)</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// d e (b c)</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">while</span><span style="color:#24292F;"> (i </span><span style="color:#CF222E;">&lt;=</span><span style="color:#24292F;"> e1 </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">&lt;=</span><span style="color:#24292F;"> e2) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">n1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> c1[e1];</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">n2</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (c2[e2] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> optimized</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">cloneIfMounted</span><span style="color:#24292F;">(c2[e2])</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">normalizeVNode</span><span style="color:#24292F;">(c2[e2]));</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#8250DF;">isSameVNodeType</span><span style="color:#24292F;">(n1, n2)) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">patch</span><span style="color:#24292F;">(n1, n2, container, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">break</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            e1</span><span style="color:#CF222E;">--</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            e2</span><span style="color:#CF222E;">--</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// 3. common sequence + mount</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// (a b)</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// (a b) c</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// i = 2, e1 = 1, e2 = 2</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// (a b)</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// c (a b)</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// i = 0, e1 = -1, e2 = 0</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (i </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> e1) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (i </span><span style="color:#CF222E;">&lt;=</span><span style="color:#24292F;"> e2) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">nextPos</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> e2 </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">anchor</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> nextPos </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> l2 </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> c2[nextPos].el </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> parentAnchor;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">while</span><span style="color:#24292F;"> (i </span><span style="color:#CF222E;">&lt;=</span><span style="color:#24292F;"> e2) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">patch</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, (c2[i] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> optimized</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">cloneIfMounted</span><span style="color:#24292F;">(c2[i])</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">normalizeVNode</span><span style="color:#24292F;">(c2[i])), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">                    i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// 4. common sequence + unmount</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// (a b) c</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// (a b)</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// i = 2, e1 = 2, e2 = 1</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// a (b c)</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// (b c)</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// i = 0, e1 = 0, e2 = -1</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (i </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> e2) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">while</span><span style="color:#24292F;"> (i </span><span style="color:#CF222E;">&lt;=</span><span style="color:#24292F;"> e1) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">unmount</span><span style="color:#24292F;">(c1[i], parentComponent, parentSuspense, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// 5. unknown sequence</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// [i ... e1 + 1]: a b [c d e] f g</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// [i ... e2 + 1]: a b [e d c h] f g</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// i = 2, e1 = 4, e2 = 5</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">s1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> i; </span><span style="color:#6E7781;">// prev starting index</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">s2</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> i; </span><span style="color:#6E7781;">// next starting index</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// 5.1 build key:index map for newChildren</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">keyToNewIndexMap</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Map</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> s2; i </span><span style="color:#CF222E;">&lt;=</span><span style="color:#24292F;"> e2; i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">nextChild</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (c2[i] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> optimized</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">cloneIfMounted</span><span style="color:#24292F;">(c2[i])</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">normalizeVNode</span><span style="color:#24292F;">(c2[i]));</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (nextChild.key </span><span style="color:#CF222E;">!=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (keyToNewIndexMap.</span><span style="color:#8250DF;">has</span><span style="color:#24292F;">(nextChild.key)) {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">warn$1</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">\`Duplicate keys found during update:\`</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">JSON</span><span style="color:#24292F;">.</span><span style="color:#0550AE;">stringify</span><span style="color:#24292F;">(nextChild.key), </span><span style="color:#0A3069;">\`Make sure keys are unique.\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    keyToNewIndexMap.</span><span style="color:#8250DF;">set</span><span style="color:#24292F;">(nextChild.key, i);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// 5.2 loop through old children left to be patched and try to patch</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// matching nodes &amp; remove nodes that are no longer present</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> j;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> patched </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">toBePatched</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> e2 </span><span style="color:#CF222E;">-</span><span style="color:#24292F;"> s2 </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> moved </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// used to track whether any node has moved</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> maxNewIndexSoFar </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// works as Map&lt;newIndex, oldIndex&gt;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// Note that oldIndex is offset by +1</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// and oldIndex = 0 is a special value indicating the new node has</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// no corresponding old node.</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// used for determining longest stable subsequence</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">newIndexToOldIndexMap</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Array</span><span style="color:#24292F;">(toBePatched);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">; i </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> toBePatched; i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">)</span></span>
<span class="line"><span style="color:#24292F;">                newIndexToOldIndexMap[i] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> s1; i </span><span style="color:#CF222E;">&lt;=</span><span style="color:#24292F;"> e1; i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">prevChild</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> c1[i];</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (patched </span><span style="color:#CF222E;">&gt;=</span><span style="color:#24292F;"> toBePatched) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// all new children have been patched so this can only be a removal</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">unmount</span><span style="color:#24292F;">(prevChild, parentComponent, parentSuspense, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">continue</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> newIndex;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (prevChild.key </span><span style="color:#CF222E;">!=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    newIndex </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> keyToNewIndexMap.</span><span style="color:#8250DF;">get</span><span style="color:#24292F;">(prevChild.key);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// key-less node, try to locate a key-less node of the same type</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (j </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> s2; j </span><span style="color:#CF222E;">&lt;=</span><span style="color:#24292F;"> e2; j</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (newIndexToOldIndexMap[j </span><span style="color:#CF222E;">-</span><span style="color:#24292F;"> s2] </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                            </span><span style="color:#8250DF;">isSameVNodeType</span><span style="color:#24292F;">(prevChild, c2[j])) {</span></span>
<span class="line"><span style="color:#24292F;">                            newIndex </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> j;</span></span>
<span class="line"><span style="color:#24292F;">                            </span><span style="color:#CF222E;">break</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">                        }</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (newIndex </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">undefined</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">unmount</span><span style="color:#24292F;">(prevChild, parentComponent, parentSuspense, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                    newIndexToOldIndexMap[newIndex </span><span style="color:#CF222E;">-</span><span style="color:#24292F;"> s2] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (newIndex </span><span style="color:#CF222E;">&gt;=</span><span style="color:#24292F;"> maxNewIndexSoFar) {</span></span>
<span class="line"><span style="color:#24292F;">                        maxNewIndexSoFar </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> newIndex;</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                        moved </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">patch</span><span style="color:#24292F;">(prevChild, c2[newIndex], container, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">                    patched</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// 5.3 move and mount</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// generate longest stable subsequence only when nodes have moved</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">increasingNewIndexSequence</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> moved</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">getSequence</span><span style="color:#24292F;">(newIndexToOldIndexMap)</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">EMPTY_ARR</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            j </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> increasingNewIndexSequence.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">-</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// looping backwards so that we can use last patched node as anchor</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> toBePatched </span><span style="color:#CF222E;">-</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">; i </span><span style="color:#CF222E;">&gt;=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">; i</span><span style="color:#CF222E;">--</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">nextIndex</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> s2 </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> i;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">nextChild</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> c2[nextIndex];</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">anchor</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> nextIndex </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> l2 </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> c2[nextIndex </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">].el </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> parentAnchor;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (newIndexToOldIndexMap[i] </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// mount new</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">patch</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (moved) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// move if:</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// There is no stable subsequence (e.g. a reverse)</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// OR current node is not among the stable sequence</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (j </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> increasingNewIndexSequence[j]) {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">move</span><span style="color:#24292F;">(nextChild, container, anchor, </span><span style="color:#0550AE;">2</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* MoveType.REORDER */</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                        j</span><span style="color:#CF222E;">--</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">move</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">vnode</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">anchor</span><span style="color:#24292F;">, </span><span style="color:#953800;">moveType</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">el</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">type</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">transition</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">children</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">shapeFlag</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> vnode;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">6</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.COMPONENT */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">move</span><span style="color:#24292F;">(vnode.component.subTree, container, anchor, moveType);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">128</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.SUSPENSE */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            vnode.suspense.</span><span style="color:#8250DF;">move</span><span style="color:#24292F;">(container, anchor, moveType);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">64</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.TELEPORT */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            type.</span><span style="color:#8250DF;">move</span><span style="color:#24292F;">(vnode, container, anchor, internals);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (type </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> Fragment) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">hostInsert</span><span style="color:#24292F;">(el, container, anchor);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">; i </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> children.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">; i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">move</span><span style="color:#24292F;">(children[i], container, anchor, moveType);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">hostInsert</span><span style="color:#24292F;">(vnode.anchor, container, anchor);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (type </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> Static) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">moveStaticNode</span><span style="color:#24292F;">(vnode, container, anchor);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// single nodes</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">needTransition</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> moveType </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* MoveType.REORDER */</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.ELEMENT */</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            transition;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (needTransition) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (moveType </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* MoveType.ENTER */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                transition.</span><span style="color:#8250DF;">beforeEnter</span><span style="color:#24292F;">(el);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">hostInsert</span><span style="color:#24292F;">(el, container, anchor);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">queuePostRenderEffect</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> transition.</span><span style="color:#8250DF;">enter</span><span style="color:#24292F;">(el), parentSuspense);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">leave</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">delayLeave</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">afterLeave</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> transition;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">remove</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hostInsert</span><span style="color:#24292F;">(el, container, anchor);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">performLeave</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">leave</span><span style="color:#24292F;">(el, () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">remove</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">                        afterLeave </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">afterLeave</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">                    });</span></span>
<span class="line"><span style="color:#24292F;">                };</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (delayLeave) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">delayLeave</span><span style="color:#24292F;">(el, remove, performLeave);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">performLeave</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">hostInsert</span><span style="color:#24292F;">(el, container, anchor);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">unmount</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">vnode</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">doRemove</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">type</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">props</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">ref</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">children</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">dynamicChildren</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">shapeFlag</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">patchFlag</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">dirs</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> vnode;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// unset ref</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (ref </span><span style="color:#CF222E;">!=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">setRef</span><span style="color:#24292F;">(ref, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, parentSuspense, vnode, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">256</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.COMPONENT_SHOULD_KEEP_ALIVE */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            parentComponent.ctx.</span><span style="color:#8250DF;">deactivate</span><span style="color:#24292F;">(vnode);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">shouldInvokeDirs</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.ELEMENT */</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> dirs;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">shouldInvokeVnodeHook</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#8250DF;">isAsyncWrapper</span><span style="color:#24292F;">(vnode);</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> vnodeHook;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shouldInvokeVnodeHook </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            (vnodeHook </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> props </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> props.onVnodeBeforeUnmount)) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">invokeVNodeHook</span><span style="color:#24292F;">(vnodeHook, parentComponent, vnode);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">6</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.COMPONENT */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">unmountComponent</span><span style="color:#24292F;">(vnode.component, parentSuspense, doRemove);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">128</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.SUSPENSE */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                vnode.suspense.</span><span style="color:#8250DF;">unmount</span><span style="color:#24292F;">(parentSuspense, doRemove);</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shouldInvokeDirs) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">invokeDirectiveHook</span><span style="color:#24292F;">(vnode, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, parentComponent, </span><span style="color:#0A3069;">&#39;beforeUnmount&#39;</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">64</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.TELEPORT */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                vnode.type.</span><span style="color:#8250DF;">remove</span><span style="color:#24292F;">(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (dynamicChildren </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// #1153: fast path should not be taken for non-stable (v-for) fragments</span></span>
<span class="line"><span style="color:#24292F;">                (type </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> Fragment </span><span style="color:#CF222E;">||</span></span>
<span class="line"><span style="color:#24292F;">                    (patchFlag </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> patchFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">64</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.STABLE_FRAGMENT */</span><span style="color:#24292F;">))) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#6E7781;">// fast path for block nodes: only need to unmount dynamic children.</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">unmountChildren</span><span style="color:#24292F;">(dynamicChildren, parentComponent, parentSuspense, </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> ((type </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> Fragment </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                patchFlag </span><span style="color:#CF222E;">&amp;</span></span>
<span class="line"><span style="color:#24292F;">                    (</span><span style="color:#0550AE;">128</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.KEYED_FRAGMENT */</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">|</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">256</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.UNKEYED_FRAGMENT */</span><span style="color:#24292F;">)) </span><span style="color:#CF222E;">||</span></span>
<span class="line"><span style="color:#24292F;">                (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">optimized </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">16</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.ARRAY_CHILDREN */</span><span style="color:#24292F;">)) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">unmountChildren</span><span style="color:#24292F;">(children, parentComponent, parentSuspense);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (doRemove) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">remove</span><span style="color:#24292F;">(vnode);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> ((shouldInvokeVnodeHook </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            (vnodeHook </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> props </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> props.onVnodeUnmounted)) </span><span style="color:#CF222E;">||</span></span>
<span class="line"><span style="color:#24292F;">            shouldInvokeDirs) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">queuePostRenderEffect</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                vnodeHook </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">invokeVNodeHook</span><span style="color:#24292F;">(vnodeHook, parentComponent, vnode);</span></span>
<span class="line"><span style="color:#24292F;">                shouldInvokeDirs </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">invokeDirectiveHook</span><span style="color:#24292F;">(vnode, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, parentComponent, </span><span style="color:#0A3069;">&#39;unmounted&#39;</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">            }, parentSuspense);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">remove</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">vnode</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">type</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">el</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">anchor</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">transition</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> vnode;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (type </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> Fragment) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (vnode.patchFlag </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                vnode.patchFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">2048</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* PatchFlags.DEV_ROOT_FRAGMENT */</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                transition </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">transition.persisted) {</span></span>
<span class="line"><span style="color:#24292F;">                vnode.children.</span><span style="color:#8250DF;">forEach</span><span style="color:#24292F;">(</span><span style="color:#953800;">child</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (child.type </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> Comment) {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">hostRemove</span><span style="color:#24292F;">(child.el);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">remove</span><span style="color:#24292F;">(child);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                });</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">removeFragment</span><span style="color:#24292F;">(el, anchor);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (type </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> Static) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">removeStaticNode</span><span style="color:#24292F;">(vnode);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">return</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">performRemove</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">hostRemove</span><span style="color:#24292F;">(el);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (transition </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">transition.persisted </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> transition.afterLeave) {</span></span>
<span class="line"><span style="color:#24292F;">                transition.</span><span style="color:#8250DF;">afterLeave</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        };</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (vnode.shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.ELEMENT */</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            transition </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">transition.persisted) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">leave</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">delayLeave</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> transition;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">performLeave</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">leave</span><span style="color:#24292F;">(el, performRemove);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (delayLeave) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">delayLeave</span><span style="color:#24292F;">(vnode.el, performRemove, performLeave);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">performLeave</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">performRemove</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">removeFragment</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">cur</span><span style="color:#24292F;">, </span><span style="color:#953800;">end</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// For fragments, directly remove all contained DOM nodes.</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// (fragment child nodes cannot have transition)</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> next;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">while</span><span style="color:#24292F;"> (cur </span><span style="color:#CF222E;">!==</span><span style="color:#24292F;"> end) {</span></span>
<span class="line"><span style="color:#24292F;">            next </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hostNextSibling</span><span style="color:#24292F;">(cur);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">hostRemove</span><span style="color:#24292F;">(cur);</span></span>
<span class="line"><span style="color:#24292F;">            cur </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> next;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">hostRemove</span><span style="color:#24292F;">(end);</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">unmountComponent</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">instance</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">doRemove</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (instance.type.__hmrId) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">unregisterHMR</span><span style="color:#24292F;">(instance);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">bum</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">scope</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">update</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">subTree</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">um</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> instance;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// beforeUnmount hook</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (bum) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">invokeArrayFns</span><span style="color:#24292F;">(bum);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// stop effects in component scope</span></span>
<span class="line"><span style="color:#24292F;">        scope.</span><span style="color:#8250DF;">stop</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// update may be null if a component is unmounted before its async</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// setup has resolved.</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (update) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#6E7781;">// so that scheduler will no longer invoke it</span></span>
<span class="line"><span style="color:#24292F;">            update.active </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">unmount</span><span style="color:#24292F;">(subTree, instance, parentSuspense, doRemove);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// unmounted hook</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (um) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">queuePostRenderEffect</span><span style="color:#24292F;">(um, parentSuspense);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">queuePostRenderEffect</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            instance.isUnmounted </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }, parentSuspense);</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// A component with async dep inside a pending suspense is unmounted before</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// its async dep resolves. This should remove the dep from the suspense, and</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#6E7781;">// cause the suspense to resolve immediately if that was the last dep.</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (parentSuspense </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            parentSuspense.pendingBranch </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">parentSuspense.isUnmounted </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            instance.asyncDep </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">instance.asyncResolved </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            instance.suspenseId </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> parentSuspense.pendingId) {</span></span>
<span class="line"><span style="color:#24292F;">            parentSuspense.deps</span><span style="color:#CF222E;">--</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (parentSuspense.deps </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                parentSuspense.</span><span style="color:#8250DF;">resolve</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">devtoolsComponentRemoved</span><span style="color:#24292F;">(instance);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">unmountChildren</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">children</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">parentSuspense</span><span style="color:#24292F;">, </span><span style="color:#953800;">doRemove</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">, </span><span style="color:#953800;">optimized</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">, </span><span style="color:#953800;">start</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> i </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> start; i </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> children.</span><span style="color:#0550AE;">length</span><span style="color:#24292F;">; i</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">unmount</span><span style="color:#24292F;">(children[i], parentComponent, parentSuspense, doRemove, optimized);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">getNextHostNode</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">vnode</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (vnode.shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">6</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.COMPONENT */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">getNextHostNode</span><span style="color:#24292F;">(vnode.component.subTree);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (vnode.shapeFlag </span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">128</span><span style="color:#24292F;"> </span><span style="color:#6E7781;">/* ShapeFlags.SUSPENSE */</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> vnode.suspense.</span><span style="color:#8250DF;">next</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">hostNextSibling</span><span style="color:#24292F;">((vnode.anchor </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> vnode.el));</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">render</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">vnode</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (vnode </span><span style="color:#CF222E;">==</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (container._vnode) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#8250DF;">unmount</span><span style="color:#24292F;">(container._vnode, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">patch</span><span style="color:#24292F;">(container._vnode </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, vnode, container, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, isSVG);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">flushPreFlushCbs</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">flushPostFlushCbs</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">        container._vnode </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> vnode;</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">internals</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        p: patch,</span></span>
<span class="line"><span style="color:#24292F;">        um: unmount,</span></span>
<span class="line"><span style="color:#24292F;">        m: move,</span></span>
<span class="line"><span style="color:#24292F;">        r: remove,</span></span>
<span class="line"><span style="color:#24292F;">        mt: mountComponent,</span></span>
<span class="line"><span style="color:#24292F;">        mc: mountChildren,</span></span>
<span class="line"><span style="color:#24292F;">        pc: patchChildren,</span></span>
<span class="line"><span style="color:#24292F;">        pbc: patchBlockChildren,</span></span>
<span class="line"><span style="color:#24292F;">        n: getNextHostNode,</span></span>
<span class="line"><span style="color:#24292F;">        o: options</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> hydrate;</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> hydrateNode;</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (createHydrationFns) {</span></span>
<span class="line"><span style="color:#24292F;">        [hydrate, hydrateNode] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">createHydrationFns</span><span style="color:#24292F;">(internals);</span></span>
<span class="line"><span style="color:#24292F;">    }</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        render,</span></span>
<span class="line"><span style="color:#24292F;">        hydrate,</span></span>
<span class="line"><span style="color:#24292F;">        createApp: </span><span style="color:#8250DF;">createAppAPI</span><span style="color:#24292F;">(render, hydrate)</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">createAppAPI</span><span style="color:#24292F;">(</span><span style="color:#953800;">render</span><span style="color:#24292F;">, </span><span style="color:#953800;">hydrate</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">createApp</span><span style="color:#24292F;">(</span><span style="color:#953800;">rootComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">rootProps</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#8250DF;">isFunction</span><span style="color:#24292F;">(rootComponent)) {</span></span>
<span class="line"><span style="color:#24292F;">            rootComponent </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Object</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">assign</span><span style="color:#24292F;">({}, rootComponent);</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (rootProps </span><span style="color:#CF222E;">!=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#8250DF;">isObject</span><span style="color:#24292F;">(rootProps)) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">warn$1</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">\`root props passed to app.mount() must be an object.\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">            rootProps </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">context</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">createAppContext</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">installedPlugins</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Set</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">let</span><span style="color:#24292F;"> isMounted </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">false</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">app</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (context.app </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            _uid: uid</span><span style="color:#CF222E;">++</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">            _component: rootComponent,</span></span>
<span class="line"><span style="color:#24292F;">            _props: rootProps,</span></span>
<span class="line"><span style="color:#24292F;">            _container: </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">            _context: context,</span></span>
<span class="line"><span style="color:#24292F;">            _instance: </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">            version,</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">get</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">config</span><span style="color:#24292F;">() {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> context.config;</span></span>
<span class="line"><span style="color:#24292F;">            },</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">set</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">config</span><span style="color:#24292F;">(</span><span style="color:#953800;">v</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">warn$1</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">\`app.config cannot be replaced. Modify individual options instead.\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            },</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">use</span><span style="color:#24292F;">(</span><span style="color:#953800;">plugin</span><span style="color:#24292F;">, </span><span style="color:#CF222E;">...</span><span style="color:#953800;">options</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (installedPlugins.</span><span style="color:#8250DF;">has</span><span style="color:#24292F;">(plugin)) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">warn$1</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">\`Plugin has already been applied to target app.\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (plugin </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">isFunction</span><span style="color:#24292F;">(plugin.install)) {</span></span>
<span class="line"><span style="color:#24292F;">                    installedPlugins.</span><span style="color:#8250DF;">add</span><span style="color:#24292F;">(plugin);</span></span>
<span class="line"><span style="color:#24292F;">                    plugin.</span><span style="color:#8250DF;">install</span><span style="color:#24292F;">(app, </span><span style="color:#CF222E;">...</span><span style="color:#24292F;">options);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#8250DF;">isFunction</span><span style="color:#24292F;">(plugin)) {</span></span>
<span class="line"><span style="color:#24292F;">                    installedPlugins.</span><span style="color:#8250DF;">add</span><span style="color:#24292F;">(plugin);</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">plugin</span><span style="color:#24292F;">(app, </span><span style="color:#CF222E;">...</span><span style="color:#24292F;">options);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">warn$1</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">\`A plugin must either be a function or an object with an &quot;install&quot; \`</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">+</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#0A3069;">\`function.\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> app;</span></span>
<span class="line"><span style="color:#24292F;">            },</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">mixin</span><span style="color:#24292F;">(</span><span style="color:#953800;">mixin</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">context.mixins.</span><span style="color:#8250DF;">includes</span><span style="color:#24292F;">(mixin)) {</span></span>
<span class="line"><span style="color:#24292F;">                        context.mixins.</span><span style="color:#8250DF;">push</span><span style="color:#24292F;">(mixin);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">warn$1</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&#39;Mixin has already been applied to target app&#39;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">+</span></span>
<span class="line"><span style="color:#24292F;">                            (mixin.name </span><span style="color:#CF222E;">?</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">\`: \${</span><span style="color:#24292F;">mixin</span><span style="color:#0A3069;">.</span><span style="color:#24292F;">name</span><span style="color:#0A3069;">}\`</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;&#39;</span><span style="color:#24292F;">));</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> app;</span></span>
<span class="line"><span style="color:#24292F;">            },</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">component</span><span style="color:#24292F;">(</span><span style="color:#953800;">name</span><span style="color:#24292F;">, </span><span style="color:#953800;">component</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">validateComponentName</span><span style="color:#24292F;">(name, context.config);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">component) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> context.components[name];</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (context.components[name]) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">warn$1</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">\`Component &quot;\${</span><span style="color:#24292F;">name</span><span style="color:#0A3069;">}&quot; has already been registered in target app.\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                context.components[name] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> component;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> app;</span></span>
<span class="line"><span style="color:#24292F;">            },</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">directive</span><span style="color:#24292F;">(</span><span style="color:#953800;">name</span><span style="color:#24292F;">, </span><span style="color:#953800;">directive</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">validateDirectiveName</span><span style="color:#24292F;">(name);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">directive) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> context.directives[name];</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (context.directives[name]) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">warn$1</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">\`Directive &quot;\${</span><span style="color:#24292F;">name</span><span style="color:#0A3069;">}&quot; has already been registered in target app.\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                context.directives[name] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> directive;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> app;</span></span>
<span class="line"><span style="color:#24292F;">            },</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">mount</span><span style="color:#24292F;">(</span><span style="color:#953800;">rootContainer</span><span style="color:#24292F;">, </span><span style="color:#953800;">isHydrate</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">isMounted) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// #5571</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (rootContainer.__vue_app__) {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">warn$1</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">\`There is already an app instance mounted on the host container.</span><span style="color:#0550AE;">\\n</span><span style="color:#0A3069;">\`</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">+</span></span>
<span class="line"><span style="color:#24292F;">                            </span><span style="color:#0A3069;">\` If you want to mount another app on the same host container,\`</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">+</span></span>
<span class="line"><span style="color:#24292F;">                            </span><span style="color:#0A3069;">\` you need to unmount the previous app by calling </span><span style="color:#0550AE;">\\\`</span><span style="color:#0A3069;">app.unmount()</span><span style="color:#0550AE;">\\\`</span><span style="color:#0A3069;"> first.\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">vnode</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">createVNode</span><span style="color:#24292F;">(rootComponent, rootProps);</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// store app context on the root VNode.</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// this will be set on the root instance on initial mount.</span></span>
<span class="line"><span style="color:#24292F;">                    vnode.appContext </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> context;</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#6E7781;">// HMR root reload</span></span>
<span class="line"><span style="color:#24292F;">                    {</span></span>
<span class="line"><span style="color:#24292F;">                        context.</span><span style="color:#8250DF;">reload</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> () </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                            </span><span style="color:#8250DF;">render</span><span style="color:#24292F;">(</span><span style="color:#8250DF;">cloneVNode</span><span style="color:#24292F;">(vnode), rootContainer, isSVG);</span></span>
<span class="line"><span style="color:#24292F;">                        };</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (isHydrate </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> hydrate) {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">hydrate</span><span style="color:#24292F;">(vnode, rootContainer);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">render</span><span style="color:#24292F;">(vnode, rootContainer, isSVG);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    isMounted </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">                    app._container </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> rootContainer;</span></span>
<span class="line"><span style="color:#24292F;">                    rootContainer.__vue_app__ </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> app;</span></span>
<span class="line"><span style="color:#24292F;">                    {</span></span>
<span class="line"><span style="color:#24292F;">                        app._instance </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> vnode.component;</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">devtoolsInitApp</span><span style="color:#24292F;">(app, version);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">getExposeProxy</span><span style="color:#24292F;">(vnode.component) </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> vnode.component.proxy;</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">warn$1</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">\`App has already been mounted.</span><span style="color:#0550AE;">\\n</span><span style="color:#0A3069;">\`</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">+</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#0A3069;">\`If you want to remount the same app, move your app creation logic \`</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">+</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#0A3069;">\`into a factory function and create fresh app instances for each \`</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">+</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#0A3069;">\`mount - e.g. </span><span style="color:#0550AE;">\\\`</span><span style="color:#0A3069;">const createMyApp = () =&gt; createApp(App)</span><span style="color:#0550AE;">\\\`</span><span style="color:#0A3069;">\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            },</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">unmount</span><span style="color:#24292F;">() {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (isMounted) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">render</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, app._container);</span></span>
<span class="line"><span style="color:#24292F;">                    {</span></span>
<span class="line"><span style="color:#24292F;">                        app._instance </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#8250DF;">devtoolsUnmountApp</span><span style="color:#24292F;">(app);</span></span>
<span class="line"><span style="color:#24292F;">                    }</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#CF222E;">delete</span><span style="color:#24292F;"> app._container.__vue_app__;</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">warn$1</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">\`Cannot unmount an app that is not mounted.\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">            },</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#8250DF;">provide</span><span style="color:#24292F;">(</span><span style="color:#953800;">key</span><span style="color:#24292F;">, </span><span style="color:#953800;">value</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (key </span><span style="color:#CF222E;">in</span><span style="color:#24292F;"> context.provides) {</span></span>
<span class="line"><span style="color:#24292F;">                    </span><span style="color:#8250DF;">warn$1</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">\`App already provides property with key &quot;\${</span><span style="color:#0550AE;">String</span><span style="color:#0A3069;">(</span><span style="color:#24292F;">key</span><span style="color:#0A3069;">)</span><span style="color:#0A3069;">}&quot;. \`</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">+</span></span>
<span class="line"><span style="color:#24292F;">                        </span><span style="color:#0A3069;">\`It will be overwritten with the new value.\`</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#24292F;">                }</span></span>
<span class="line"><span style="color:#24292F;">                context.provides[key] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> value;</span></span>
<span class="line"><span style="color:#24292F;">                </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> app;</span></span>
<span class="line"><span style="color:#24292F;">            }</span></span>
<span class="line"><span style="color:#24292F;">        });</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> app;</span></span>
<span class="line"><span style="color:#24292F;">    };</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>render\u7684\u6838\u5FC3\u4F5C\u7528\u5C31\u662F\u6E32\u67D3\u7EC4\u4EF6\u6216\u76F8\u5173\u8282\u70B9\uFF0C\u5C06\u5176\u6D3E\u53D1</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">render</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">RootRenderFunction</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> (</span><span style="color:#953800;">vnode</span><span style="color:#24292F;">, </span><span style="color:#953800;">container</span><span style="color:#24292F;">, </span><span style="color:#953800;">isSVG</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (vnode </span><span style="color:#CF222E;">==</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (container._vnode) {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">unmount</span><span style="color:#24292F;">(container._vnode, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">true</span><span style="color:#24292F;">)</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    } </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">patch</span><span style="color:#24292F;">(container._vnode </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, vnode, container, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">null</span><span style="color:#24292F;">, isSVG)</span></span>
<span class="line"><span style="color:#24292F;">    }</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#8250DF;">flushPostFlushCbs</span><span style="color:#24292F;">()</span></span>
<span class="line"><span style="color:#24292F;">    container._vnode </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> vnode</span></span>
<span class="line"><span style="color:#24292F;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">\u603B\u7ED3</p><p>\u5728\u4F7F\u7528vue\u7684<code>createApp</code>\u65F6\uFF0C\u5185\u90E8\u901A\u8FC7<code>createRenderer</code>\u8FD4\u56DE\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u8FD9\u4E2A\u5BF9\u8C61\u4E0A\u6709<code>createApp</code>\u5BF9\u8C61\u548C<code>render</code>\u65B9\u6CD5\uFF0C<code>createApp</code>\u5BF9\u8C61\u4E3A\u7528\u6237\u63D0\u4F9B\u4E00\u7CFB\u5217\u4F7F\u7528\u65B9\u6CD5(provide\u3001inject\u3001use\u3001component\u3001mount)\uFF0C<code>render</code>\u65B9\u6CD5\u4E3A\u540E\u7EED\u6E32\u67D3\u505A\u51C6\u5907</p></div>`,19),o=[e];function c(r,t){return n(),a("div",null,o)}const y=s(p,[["render",c],["__file","2.initGlobalAPI.html.vue"]]);export{y as default};
